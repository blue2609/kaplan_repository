<?xml version="1.0"?>
<ScriptFunctionDefinition xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Version Major="1" Minor="0" />
  <Name>R_RF_Iris</Name>
  <Script>#Program R_RF_Iris.R
# Simple Random Forest model in R to be used in week 3 of DATA 4800
#Author: Sanjeev Naguleswaran
#Date: June 2020


#install.packages("randomForest")
#install.packages("Mass")
#install.packages("caret")

library(randomForest)

#library(datasets)
#data(iris)
#head(iris)

library(ROCR)
#library(MASS)
#library(caret)

iris &lt;-inTable

# USe the set.seed function so that we get same results each time
set.seed(123)


# Splitting data into training and testing. As the species are in order
# splitting the data based on species
iris_setosa &lt;- iris[iris$Species == "setosa", ] # 50
iris_versicolor &lt;- iris[iris$Species == "versicolor", ] # 50
iris_virginica &lt;- iris[iris$Species == "virginica", ] # 50
iris_train &lt;-
  rbind(iris_setosa[1:25, ], iris_versicolor[1:25, ], iris_virginica[1:25, ])
iris_test &lt;-
  rbind(iris_setosa[26:50, ], iris_versicolor[26:50, ], iris_virginica[26:50, ])

rf &lt;- randomForest(as.factor(Species) ~ ., data = iris_train)
rf  # Description of the random forest with no of trees, mtry = no of variables for splitting

# each tree node.
# Out of bag estimate of error rate is 4 % in Random Forest Model.
attributes(rf)
pred1 &lt;- predict(rf, iris_train)

# Sensitivity for all three species/categories is 100 %

# Prediction with test data - Test Data
pred2 &lt;- predict(rf, iris_test)
#confusionMatrix(pred2, iris_test$Species) # 94,67 % accuracy on test data
# Error Rate in Random Forest Model :
#plot(rf)

# Calculate the probability of new observations belonging to each class
# prediction_for_roc_curve will be a matrix with dimensions data_set_size x number_of_classes
prediction_for_roc_curve &lt;- predict(rf, iris_test[, -5], type = "prob")

Probability&lt;-data.frame(prediction_for_roc_curve,Species=iris_test$Species)

# Specify the different classes
classes &lt;- levels(iris_test$Species)

if(0) #for (i in 1:3)
{
  # Define which observations belong to class[i]
  true_values &lt;- ifelse(iris_test[, 5] == classes[i], 1, 0)
  
  # Assess the performance of classifier for class[i]
  pred &lt;- prediction(as.numeric(prediction_for_roc_curve[, i]), as.numeric(true_values))
  perf &lt;- performance(pred, "tpr", "fpr")
  
if(i==1)
{
ROC &lt;- data.frame("False Positive rate"=perf@x.values[[1]], "True Positive rate"=perf@y.values[[1]],classes[i],check.names = F)
 }
else
 {
ROC &lt;- rbind(ROC,data.frame("False Positive rate"=perf@x.values[[1]], "True Positive rate"=perf@y.values[[1]],classes[i],check.names = F))
 }
}
# Create Confusion Matrix
Frequency &lt;- table(iris_test$Species,pred2)
</Script>
  <Language>TERR</Language>
  <Input>
    <Name>inTable</Name>
    <Type>Table</Type>
    <DisplayName>inTable</DisplayName>
    <Description />
    <AllowedDataType>Double</AllowedDataType>
    <AllowedDataType>Float</AllowedDataType>
    <AllowedDataType>String</AllowedDataType>
  </Input>
  <Output>
    <Name>Frequency</Name>
    <Type>Table</Type>
    <DisplayName>Frequency</DisplayName>
    <Description />
  </Output>
  <Output>
    <Name>Probability</Name>
    <Type>Table</Type>
    <DisplayName>Probability</DisplayName>
    <Description />
  </Output>
  <Description />
  <AllowCaching>false</AllowCaching>
  <ApprovalStamp>AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAmHQwj9l9dUKoEvUAIN4VOwAAAAACAAAAAAAQZgAAAAEAACAAAAAE6i7xehJTSKZpb4Fikx3RD1Jh7XmthG1dmZc3yz65SAAAAAAOgAAAAAIAACAAAADxCGxVPSBHKn1xBioluHX44eMpM80EqQKJFLV94Y6z35AAAAB1gf3+Y/EGt5Ztk2Xin7otCEvFlPBhQcwDBrTxJ606q3Md/McgFSrwZpn6WrllelsYbChoJ2DkV2DkXQkGD5Zb5DjWEa4MpSXwvA9O0rvcUOTOMh43OXMyzbL0jTw3p0Xu+10x5vjn6JkQm0Se1G+aaNdFwx+l2/zaFE6CjJXgMcgvjdA76Sj4nPFIc+L2nL9AAAAADZzH5CcGg3rMt4ES0PEolWYrCoV0L2EIfB4JzJnwEsjQlIx46fny7HkKHv2yhCV4cAYgtHkpvaKJat7nQlbBfA==</ApprovalStamp>
  <AdditionalApprovalStamps />
</ScriptFunctionDefinition>